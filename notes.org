
* Notes
** leetcode
*** Next Permutation
    One way to have a larger permutation in a[i-1, n) is to find the
    minimum a[j] where a[j] > a[i-1], j \in [i, n), then swap(a[i-1],
    a[j]) and sort a[i, n).

    To guarantee we find the next permutation, we have to scan from
    right to left, find the first i that has a larger permutation in
    a[i-1, n). Then swap and sort like above. Since i is the first one has a
    larger permutation, we know that a[i, n) is nonincreasing, just
    reverse a[i, n) will sort them.

    O(n)
*** Median of Two Sorted Arrays 
    sa + sb = s will guarantee correct drop operation.

    But notice when s = 1, need to set sa = sb = 1.
*** Trapping Rain Water
    maintain a monotonous stack
    Each time, calculate the increment.
*** random list
*** gas station
    greedy approach
*** Copy list with random pointer
    the cool idea is to duplicate the node
    then seperate it
    1->2->3
    1->1'->2->2'->3->3'
*** single number II
    count every digit, and module it with 3.
*** Convert Sorted List to Binary Search Tree
    move the current head while building
*** recursive level order traversal
    https://github.com/Dionysus1227/edocteel/blob/master/Binary%20Tree%20Level%20Order%20Traversal.cc
*** Recover Binary Search Tree
    dfs, use =TreeNode *&prev= to record prev pointer
*** reverse linked list 2
    change cur->next instead of cur
    #+BEGIN_SRC C++
    ListNode *prev = dummy;
    prev->next = head;
    for (; head->next != NULL; ) {
      ListNode *node = head->next;
      head->next = node->next;
      node->next = prev->next;
      prev->next = node;
    }
    #+END_SRC
*** Largest Rectangle in Histogram
    : left[i] = left[left[i]];
*** Search in Rotated Sorted Array 2
    If duplicates are allowed, the search_gap program may fail due to the head
    may equal to tail of the array. *Just remove the tail which equal to head*
    More elegant algorithm is without search_gap first.
    https://github.com/Dionysus1227/edocteel/blob/master/Search%20in%20Rotated%20Sorted%20Array%20II.cc
*** Divide two integers
    Like Fast Exponentiation. Recursively solve it.
    #+BEGIN_SRC C++
    int dfs(a, b) {
      if ...
      // try 2*b
      ans = dfs(a, b+b)
      ans += ans  // need to double
      if (a >= b) {
        a -= b;
        ++ ans;
      }
      return ans;
    }
    #+END_SRC
    
*** Sort colors
    quickssort partition
    #+BEGIN_SRC C++
    int p = 1;
    for (int i = 0, j = 0, k = n; j < k;) {
      if (A[j] > p) {
	std::swap(A[j], A[--k]);
      } else if (A[j] < p) {
	std::swap(A[j++], A[i++]);
      } else {
	j++;
      }
     }
    }
    #+END_SRC
*** Set Matrix Zeros
    use the first row to record all column zeros
*** N-Queens 2
    A little complicated to memo, just dfs
*** Rotate Image (Cycle swap)
    #+BEGIN_SRC C++
    // 0->1->2->3->0
    std::swap(A[0], A[1]);
    std::swap(A[0], A[2]);
    std::swap(A[0], A[3]);
    #+END_SRC
*** First missing positive
    swap to make 1 to A[0], 2 to A[1] ....
    Then scan from index = 0, if A[i] != i+1, return i+1;
*** Multiply String
    Use =std::vector<int>= to store result will be much convenient.
    =ans[i+j]+=num1[i]*num2[j]=
    
*** Wildcard Matching
    https://github.com/Dionysus1227/edocteel/blob/master/Wildcard%20Matching.cc
** geeks for geeks
*** Optimal Strategy for a Game
    http://www.geeksforgeeks.org/dynamic-programming-set-31-optimal-strategy-for-a-game/
    two person playing a game, where each person alternatively take the number
    of from one of the two end. Finally, person with large sum will win.
    #+BEGIN_SRC
    // note that, need to add the minimum one!
    dp(i, j) = max(v(i) + min(dp(i+1, j-1), dp(i+2, j)),
                   v(j) + min(dp(i+1, j-1), dp(i, j-2))
    #+END_SRC
** codility
*** NumberOfDiscIntersections, model as **events**, count current number of open event
*** TripPlanning, dfs, and add one to the longest leaf, interesting!
*** PrefixMaxProduct , O(n) to count the occurrences of all prefix
*** FindThree, kmp, common prefix
* sth
** Using iterator may be more beautiful than index
** after finishing the code, remember to test with simple case!
   For tree, test NULL, 1 node, 2 nodes
** repeated doubling
   f(0), f(2), f(4), f(8), ...
* Array
  - Finds all elements that appear more than n/k times
    http://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/
    The number of elements that satisfy the requirement is <= k-1. Maintain a
    temp array of size k-1, at each element, push it into the temp array. If it
    exists, increase the count. If the size of the temp equals k - 1, decrease
    all the count, and remove thoses with count 0.
    O(nk)
    Or use a map, O(nlogk) ~ O(n)
=======
* Search
** binary search, when to set high = n -1, and when to set high = n?
** when doing binary search, low must be mid + 1, high = mid? Otherwise, there maybe a dead loop
>>>>>>> Stashed changes
* terms
  - Base Cases (dynamic programming)
* TODO
** counting triangles in undirected graph
* Tricks
** when writing binary search, make sure low & high change every time. Avoid dead loop.
** when using template, note whether to disambiguate InputIter and OutputIter
** code 'if (m < k || A[m-1] != A[i] || A[m-2] != A[i] || ... || A[m-k] != A[i])'
** if it's hard to know where to start, try the minimum/maximum one first!
* connection
** longest subarray with sum <= k & MaxDistanceMonotonic
*** smaller and lefter values are prefered; larger and righter values are prefered
*** maintain a decreasing array/stack
** find first value larger/small than i in its left side
```
for (pre[i] = i - 1; i >= 0 && A[pre[i]] <= A[i]; ) pre[i] = pre[pre[i]];
```
